<?php

namespace Tests\Unit;

use App\Http\Requests\CreditsRequest;
use App\Models\Credits;
use App\Models\User;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CreditsControllerTest extends TestCase
{
    protected $token;
    protected $testId;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }


    public function test_create_credits_api_201()
    {

        $response = $this->json('POST', 'api/a/credits/create?token=' . $this->token, [

            'type' => 'film',
            'rol' => 'principal',
            'name' => 'Merry Poppins',
            'production' => 'Disney',
            'year' => '2019',
            'month' => '05',

        ]);

        $response->assertStatus(201);

    }

    public function test_create_credits_api_422()
    {

        $response = $this->json('POST', 'api/a/credits/create?token=' . $this->token, [

            'type' => 'film',
            'rol' => 'principal',
            'name' => 'Merry Poppins',
            'production' => 'Disney',
            'year' => '2019',


        ]);

        $response->assertStatus(422);

    }

    public function test_show_credits_api_200()
    {
        $credit = factory(Credits::class)->create(['user_id' => $this->testId]);

        $response = $this->json('GET', 'api/a/credits/show/' . $credit->id . '?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [
            "id",
            "name",
            "month",
            "year",
            "rol",
            "production",
            "type",
            "user_id",

        ]]);

    }

    public function test_show_credits_api_404()
    {


        $response = $this->json('GET', 'api/a/credits/show/9999?token=' . $this->token);
        $response->assertStatus(404);


    }

    public function test_all_credits_api_200()
    {
        $credit = factory(Credits::class,10)->create(['user_id' => $this->testId]);

        $response = $this->json('GET', 'api/a/credits/show?token=' . $this->token);
        $response->assertStatus(200);
        $dataj = json_decode($response->content(),true);
        $count = count($dataj['data']);
        $this->assertTrue($count > 5);
        $response->assertJsonStructure(['data' => [[
            "id",
            "name",
            "month",
            "year",
            "rol",
            "production",
            "type",
            "user_id",

        ]]]);

    }
    public function test_all_credits_api_404()
    {


        $response = $this->json('GET', 'api/a/credits/show?token=' . $this->token);
        $response->assertStatus(404);

    }

    public function test_update_credit_api_200(){
        $credit = factory(Credits::class)->create(['user_id' => $this->testId]);
        $response = $this->json('PUT', 'api/a/credits/update/' . $credit->id . '?token=' . $this->token,[
            'type' => 'film',
            'rol' => 'principal',
            'name' => 'Merry Poppins',
            'production' => 'Disney',
            'year' => '2019',
            'month' => '05',
        ]);

        $response->assertStatus(200);
        $response->assertJson(['data'=>'Credit updated']);

    }

    public function test_delete_credit_api_200(){
        $credit = factory(Credits::class)->create(['user_id' => $this->testId]);
        $response = $this->json('DELETE', 'api/a/credits/delete/' . $credit->id . '?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJson(['data'=>'Credit removed']);

    }
}
