<?php

namespace Tests\Feature;

use App\Models\Auditions;
use App\Models\FinalCast;
use App\Models\Roles;
use App\Models\User;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class FinalCastControllerTest extends TestCase
{
    protected $userId;
    protected $auditionId;
    protected $rolId;
    protected $token;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token3@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url, 'name' => 'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token3@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);
        $audition->media()->create(['url' => $this->faker->url, 'type' => 4, 'name' => 'test']);
        $rol = factory(Roles::class)->create([
            'auditions_id' => $audition->id
        ]);
        $this->rolId = $rol->id;
        $this->userId = $user->id;
        $this->auditionId = $audition->id;
    }

    public function test_add_performer_final_cast_201()
    {

        $response = $this->json('POST', 'api/t/finalcast?token=' . $this->token, [
            'rol_id' => $this->rolId,
            'audition_id' => $this->auditionId,
            'performer_id' => factory(User::class)->create()->id
        ]);

        $response->assertStatus(201)->assertJsonStructure([
            'data',
            'message'
        ]);
    }

    public function test_add_performer_final_cast_406()
    {

        $response = $this->json('POST', 'api/t/finalcast?token=' . $this->token, [
            'rol_id' => null,
            'audition_id' => $this->auditionId,
            'performer_id' => factory(User::class)->create()->id
        ]);

        $response->assertStatus(406)->assertJson(['data' => 'fail to add performer']);
    }

    public function test_get_list_of_final_Cats_by_audition()
    {
        $audition = factory(Auditions::class)->create(['user_id' => factory(User::class)->create()->id]);
        $roles = collect(factory(Roles::class, 10)->create(['auditions_id' => $audition->id]));
        $roles->each(function ($item) use ($audition) {
            $userf = factory(User::class)->create();
            factory(UserDetails::class)->create([
                'user_id' => $userf->id,
                'type' => 2
            ]);

            factory(FinalCast::class)->create([
                'performer_id' => $userf->id,
                'audition_id' => $audition->id,
                'rol_id' => $item->id
            ]);
        });

        $response = $this->json('get', 'api/t/finalcast/' . $audition->id . '/audition?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [[
            'id',
            'user_id',
            'name',
            'rol_id',
            'rol_name'
        ]]]);
    }

    public function test_update_register_in_list_final_cast()
    {
        $user = factory(User::class)->create();
        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);
        $rol = factory(Roles::class)->create([
            'auditions_id' => $audition->id,
        ]);
        $cast = factory(FinalCast::class)->create([
            'audition_id' => $audition->id,
            'performer_id' => factory(User::class)->create()->id,
            'rol_id' => $rol->id
        ]);

        $user2 = factory(User::class)->create();

        $response = $this->json('put', 'api/t/finalcast/'.$cast->id.'?token=' . $this->token,[
            'performer_id'=>$user2->id
        ]);
        $response->assertStatus(200);
        $response->assertJson(['data' => true]);
    }


    public function test_delete_register_in_list_final_cast()
    {

        $user = factory(User::class)->create();
        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);
        $rol = factory(Roles::class)->create([
            'auditions_id' => $audition->id,
        ]);
        $cast = factory(FinalCast::class)->create([
            'audition_id' => $audition->id,
            'performer_id' => factory(User::class)->create()->id,
            'rol_id' => $rol->id
        ]);

        $user2 = factory(User::class)->create();

        $response = $this->json('delete', 'api/t/finalcast/'.$cast->id.'?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJson(['data' => true]);
    }

}
