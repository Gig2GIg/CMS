<?php

namespace Tests\Feature;

use App\Http\Controllers\Utils\StripeManagementController;
use App\Http\Repositories\UserDetailsRepository;
use App\Models\User;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class SubscriptionManagementTest extends TestCase
{
    protected $token;
    protected $testId;



    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'subscription@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>$this->faker->word()]);
        $userDetails = factory(UserDetails::class)->create([
            'type'=>2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'subscription@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }
  public function test_create_subscription_200(){
    $response = $this->json('POST','api/a/subscriptions?token='.$this->token,[
        'plan'=> '2',
        'token_stripe'=>'tok_visa'
    ]);

    $response->assertStatus(200);

  }

    public function test_update_subscription_200(){
        $userDeta = new UserDetails();
        $userDeta->where('user_id',$this->testId)->delete();
        factory(UserDetails::class)->create([
            'user_id'=>$this->testId,
            'subscription'=>2
        ]);
        $connect = new StripeManagementController();
        $req = [];
        $req['pricing_type'] = '2';
        $req['stripeToken'] = 'tok_visa';
        $req['id'] = $this->testId;
        $connect->setSubscription($req);

        $response = $this->json('POST','api/a/subscriptions?token='.$this->token,[
            'plan'=> '3',
        ]);

        $response->assertStatus(200);

    }

    public function test_delete_subscription_200(){
        $userDeta = new UserDetails();
        $userDeta->where('user_id',$this->testId)->delete();
        factory(UserDetails::class)->create([
            'user_id'=>$this->testId,
            'subscription'=>2
        ]);
        $connect = new StripeManagementController();
        $req = [];
        $req['pricing_type'] = '2';
        $req['stripeToken'] = 'tok_visa';
        $req['id'] = $this->testId;
        $connect->setSubscription($req);

        $response = $this->json('DELETE','api/a/subscriptions?token='.$this->token);

        $response->assertStatus(200);

    }
}
