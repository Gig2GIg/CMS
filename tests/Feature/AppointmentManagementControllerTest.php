<?php

namespace Tests\Feature;

use App\Models\Appointments;
use App\Models\Auditions;
use App\Models\Roles;
use App\Models\Slots;
use App\Models\User;
use App\Models\UserAuditions;
use App\Models\UserDetails;
use App\Models\UserSlots;
use Tests\TestCase;


class AppointmentManagementControllerTest extends TestCase
{
    protected $testId;
    protected $token;
    protected $userId;
    protected $auditionId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;

        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');


        // CREATED AUDITIONS WITH USER TYPE TABLE
        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);

        $this->auditionId = $audition->id;
    }


    public function test_get_rounds_from_audition_200(){
        factory(Appointments::class)->create(['auditions_id' => $this->auditionId, 'round' => 1]);
        factory(Appointments::class)->create(['auditions_id' => $this->auditionId, 'round' => 2]);
        factory(Appointments::class)->create(['auditions_id' => $this->auditionId, 'round' => 3]);
        factory(Appointments::class)->create(['auditions_id' => $this->auditionId, 'round' => 4]);
        $response = $this->json('GET',
            'api/t/appointment/'.$this->auditionId.'/rounds?token=' . $this->token);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'data'=>[[
                'id',
                'round',
                'status'
            ]]
        ]);
    }
    public function test_get_rounds_from_audition_404(){
        $response = $this->json('GET',
            'api/t/appointment/'.$this->auditionId.'/rounds?token=' . $this->token);
        $response->assertStatus(404);
        $response->assertJson([
            'data'=>[]
        ]);
    }

    public function test_create_new_round_in_appointment_200(){
        $data = [
            'slots'=>10,
            'type'=>null,
            'length'=>10,
            'start'=>'10:00',
            'end'=>'12:00',
            'round'=>2,
            'status'=>true,
            'auditions_id'=>$this->auditionId
        ];
        $response = $this->json('POST',
            'api/t/appointment/'.$this->auditionId.'/rounds?token=' . $this->token,$data);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'message',
            'data'=>[[
                'id',
                'round',
                'status'
            ]]
        ]);
    }

}
