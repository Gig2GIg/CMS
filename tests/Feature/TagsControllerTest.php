<?php 

namespace Test\Unit;

use Tests\TestCase;

use App\Models\User;
use App\Models\UserDetails;
use App\Models\Auditions;
use App\Models\Appointments;
use App\Models\Tags;
use App\Models\Feedbacks;
use App\Models\UserSlots;
use App\Models\Slots;


class TagsControllerTest extends TestCase
{
    protected $token;
    protected $userId;
    protected $feedback_id;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $director = factory(User::class)->create();
        $performance = factory(User::class)->create();
        $audition = factory(Auditions::class)->create(['user_id'=>$director->id]);

        $appoinment = factory(Appointments::class)->create([
            'auditions_id'=> $audition->id
        ]);

        $slot = factory(Slots::class)->create([
            'appointment_id'=> $appoinment->id
        ]);

        $slot_user = factory(UserSlots::class)->create([
            'user_id'=> $performance->id,
            'auditions_id'=> $audition->id,
            'slots_id'=> $slot->id
        ]);

        $work = [
            'vocals',
            'acting',
            'dancing',
        ];

        $feedback = factory(Feedbacks::class)->create([
            'auditions_id' => $audition->id,
            'user_id' => $performance->id, //id usuario que recibe evaluacion
            'evaluator_id' =>$director->id, //id de usuario que da feecback,
            'evaluation' => $this->faker->numberBetween(1, 5),
            'callback' => $this->faker->boolean(),
            'work' => $work[$this->faker->numberBetween(0, 2)],
            'favorite' => $this->faker->boolean(),
            'slot_id'=> $slot->id
        ]);

        $this->feedback_id = $feedback->id;

        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->userId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }

    public function test_created_tags_201()
    {
        
        $response = $this->json('POST',
            'api/t/feedbacks/tags?token=' . $this->token, 
            [
                'title' => 'high',
                'feedback_id' => $this->feedback_id
            ]);

        $response->assertStatus(201);
    }


    public function test_delete_tags_200()
    {
        
        $tag = factory(Tags::class)->create(['feedback_id' => $this->feedback_id]);
        $response = $this->json('DELETE', 'api/t/feedbacks/tags/'. $tag->id. '/delete' .'?token=' . $this->token);

        $response->assertStatus(200);
    }
}
