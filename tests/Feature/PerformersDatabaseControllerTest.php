<?php

namespace Tests\Feature;

use App\Models\Credits;
use App\Models\Educations;
use App\Models\Performers;
use App\Models\User;
use App\Models\UserAparence;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class PerformersDatabaseControllerTest extends TestCase
{
    protected $token;
    protected $testId;



    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type'=>1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }

    public function test_add_performer(){
        $director = factory(User::class)->create();
        $user = factory(User::class)->create();
        $director2 = factory(User::class)->create();
        $performer = factory(Performers::class)->create([
            'performer_id' => $user->id,
            'director_id' => $director->id,
            'uuid' => $this->faker->uuid,
        ]);
        $response = $this->post('api/t/performers/add?token='.$this->token,[
                'code'=>$performer->uuid,
                'director'=>$director2->id
            ]);

        $response->assertStatus(200);
        $response->assertJson(['data' => 'Add User OK']);
    }

    public function test_user_exits(){
        $director = factory(User::class)->create();
        $user = factory(User::class)->create();
        $performer = factory(Performers::class)->create([
            'performer_id' => $user->id,
            'director_id' => $director->id,
            'uuid' => $this->faker->uuid,
        ]);
        $response = $this->post('api/t/performers/add?token='.$this->token,[
            'code'=>$performer->uuid,
            'director'=>$director->id
        ]);

        $response->assertStatus(200);
        $response->assertJson(['data' => 'This user exits in your data base']);
    }

    public function test_send_code(){
        $director = factory(User::class)->create();
        $user = factory(User::class)->create();
        $performer = factory(Performers::class)->create([
            'performer_id' => $user->id,
            'director_id' => $director->id,
            'uuid' => $this->faker->uuid,
        ]);
        $response = $this->post('api/t/performers/code?token='.$this->token,[
            'code'=>$performer->uuid,
        ]);

        $response->assertStatus(200);
        $response->assertJson(['data' => 'Code share']);
    }

    public function test_list_user_by_director(){
        $director = factory(User::class)->create();
        $users = factory(User::class,15)->create();

        $users->each(function ($item) use ($director){
            $item->image()->create(['type'=>'cover','url'=>$this->faker->imageUrl(),'name'=>$this->faker->word()]);
            factory(\App\Models\UserDetails::class)->create([
                'user_id'=>$item->id,
                'type'=>2
            ]);
            factory(Educations::class,3)->create(['user_id'=>$item->id]);
            factory(Credits::class,4)->create(['user_id'=>$item->id]);
            factory(UserAparence::class)->create(['user_id'=>$item->id]);
            factory(Performers::class)->create([
                'performer_id' => $item->id,
                'director_id' => $director->id,
                'uuid' => $this->faker->uuid,
            ]);

        });

        $response = $this->post('api/t/performers/list?token='.$this->token,[
            'director'=>$director->id
        ]);

        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [[
            'user',
            'image',
            'details',
            'appearance',
            'education',
            'credits',
            'calendar',
        ]]]);

    }

}
