<?php

namespace Tests\Unit;

use App\Models\Appointments;
use App\Models\Auditions;
use App\Models\Resources;
use App\Models\Roles;
use App\Models\Slots;
use App\Models\User;
use App\Models\UserAuditions;
use App\Models\UserDetails;
use App\Models\UserManager;
use App\Models\UserSlots;
use Tests\TestCase;

class AppoinmentAuditionsControllerTest extends TestCase
{
    protected $userId;
    protected $userId2;
    protected $auditionId;
    protected $rolId;
    protected $token;
    protected $token3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;

        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');
        
        // CREATED USER TYPE APP
        $user2 = factory(User::class)->create([
                'email' => 'app@test.com',
                'password' => bcrypt('123456')]
        );
        $user2->image()->create(['url' => $this->faker->url,'name'=>$this->faker->word()]);

        $userDetails2 = factory(UserDetails::class)->create([
            'type' => 2,
            'user_id' => $user2->id,
        ]);

         // CREATED USER TYPE APP
         $user3 = factory(User::class)->create([
            'email' => 'app-3@test.com',
            'password' => bcrypt('123456')]
        );
        $user3->image()->create(['url' => $this->faker->url,'name'=>$this->faker->word()]);

        $userDetails2 = factory(UserDetails::class)->create([
            'type' => 2,
            'user_id' => $user3->id,
        ]);
        // =========================

        // CREATED AUDITIONS WITH USER TYPE TABLE
        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);

        $audition->media()->create(['url' => $this->faker->url, 'type' => 4, 'name' => 'test']);
        
        // CREATED ROTES TO AUIDITIONS WITH USER TYPE TABLE
        $rols = factory(Roles::class, 12)->create([
            'auditions_id' => $audition->id
        ]);

        // CREATED APPOIMENT TO AUIDITIONS WITH USER TYPE TABLE
        $appoiment = factory(Appointments::class)->create([
            'auditions_id' => $audition->id
        ]);
         // CREATED SLOTS WITH APPOIMENTS ID WITH USER TYPE TABLE
        $slot = factory(Slots::class, 12)->create([
            'appointment_id' => $appoiment->id
        ]);

        // CREATED REQUEST UPCOMMING WIT WITH USER TYPE APP
        $user_audition = factory(UserAuditions::class)->create([
            'user_id' => $user2->id,
            'auditions_id' => $audition->id,
            'rol_id' =>  $rols->first()->id,
            'slot_id' => $slot->first()->id,
            'type' => 1
        ]);

         // CREATED UserSlots
         $user_slot = factory(UserSlots::class)->create([
            'user_id' => $user3->id,
            'auditions_id' => $audition->id,
            'roles_id' =>  $rols->first()->id,
            'slots_id' => $slot[3]->id,
         
        ]);



        $this->rolId = $rols->first()->id;
        $this->userId2 = $user2->id;
        $this->userId3 = $user3->id;
        $this->auditionId = $audition->id;
    }



    public function test_it_checking_auditions_QR_200_with_slot_add()
    {
        $response = $this->json('GET',
            'api/t/appointments/auditions?'.'role_id='. $this->rolId.'&user='. $this->userId2. '&token=' . $this->token);

   
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [
            'id',
            'image',
            'name',
            'hour',
            'slot_id',
        ]]);
    }


    public function test_it_checking_auditions_QR_200_walking()
    {
        $response = $this->json('GET',
            'api/t/appointments/auditions?'.'role_id='. $this->rolId.'&user='. $this->userId3. '&token=' . $this->token);

   
        $response->assertStatus(200);

        $response->assertJsonStructure(['data' => [
            'id',
            'image',
            'name'
        ]]);  
    }


}
