<?php

namespace Tests\Unit;

use App\Models\Educations;
use App\Models\User;
use App\Models\UserDetails;
use Tests\TestCase;


class EducationControllerTest extends TestCase
{
    protected $token;
    protected $testId;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }


    public function test_create_educations_api_201()
    {

        $response = $this->json('POST', 'api/a/educations/create?token=' . $this->token, [
            'school'=>'Hogwarts',
            'degree'=>'Wizard',
            'instructor'=>'Albus Dumbledore',
            'location'=>' In some place of England',
            'year'=>'1996',


        ]);

        $response->assertStatus(201);

    }

    public function test_create_educations_api_422()
    {

        $response = $this->json('POST', 'api/a/educations/create?token=' . $this->token, [

            'degree'=>'Wizard',
            'instructor'=>'Albus Dumbledore',
            'location'=>' In some place of England',
            'year'=>'1996',


        ]);

        $response->assertStatus(422);

    }

    public function test_show_educations_api_200()
    {
        $educations = factory(Educations::class)->create(['user_id' => $this->testId]);

        $response = $this->json('GET', 'api/a/educations/show/' . $educations->id . '?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [
            'id',
            'school',
            'degree',
            'instructor',
            'location',
            'year',
            'user_id'
        ]]);

    }

    public function test_show_educations_api_404()
    {


        $response = $this->json('GET', 'api/a/educations/show/9999?token=' . $this->token);
        $response->assertStatus(404);


    }

    public function test_all_educations_api_200()
    {
        $educations = factory(Educations::class,10)->create(['user_id' => $this->testId]);

        $response = $this->json('GET', 'api/a/educations/show?token=' . $this->token);
        $response->assertStatus(200);
        $dataj = json_decode($response->content(),true);
        $count = count($dataj['data']);
        $this->assertTrue($count > 5);
        $response->assertJsonStructure(['data' => [[
            'id',
            'school',
            'degree',
            'instructor',
            'location',
            'year',
            'user_id'
        ]]]);

    }
    public function test_all_educations_api_404()
    {


        $response = $this->json('GET', 'api/a/educations/show?token=' . $this->token);
        $response->assertStatus(404);

    }

    public function test_update_educations_api_200(){
        $educations = factory(Educations::class)->create(['user_id' => $this->testId]);
        $response = $this->json('PUT', 'api/a/educations/update/' . $educations->id . '?token=' . $this->token,[
            'school'=>'Hogwarts',
            'degree'=>'Wizard',
            'instructor'=>'Albus Dumbledore',
            'location'=>' In some place of England',
            'year'=>'1996',
        ]);

        $response->assertStatus(200);
        $response->assertJson(['data'=>'Education updated']);

    }

    public function test_delete_educations_api_200(){
        $educations = factory(Educations::class)->create(['user_id' => $this->testId]);
        $response = $this->json('DELETE', 'api/a/educations/delete/' . $educations->id . '?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJson(['data'=>'Education removed']);

    }
}
