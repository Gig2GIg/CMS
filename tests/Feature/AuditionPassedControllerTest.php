<?php

namespace Tests\Feature;

use App\Models\Appointments;
use App\Models\Auditions;
use App\Models\Roles;
use App\Models\Slots;
use App\Models\User;
use App\Models\UserDetails;
use App\Models\UserSlots;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class AuditionPassedControllerTest extends TestCase
{
    protected $userId;
    protected $auditionId;
    protected $rolId;
    protected $token;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;

        $userDetails = factory(UserDetails::class)->create([
            'type' => 2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);
        $audition->media()->create(['url' => $this->faker->url, 'type' => 6, 'name' => 'test']);
        $rol = factory(Roles::class)->create([
            'auditions_id' => $audition->id
        ]);
        $this->rolId = $rol->id;
        $this->userId = $user->id;
        $this->auditionId = $audition->id;
    }

    public function test_save_requested()
    {
        $audition = factory(Auditions::class)->create(['user_id' => $this->userId]);
        $users = factory(User::class, 7)->create();
        $appointment = factory(Appointments::class)->create(['auditions_id' => $audition->id]);
        $slot = factory(Slots::class)->create(['appointment_id'=>$appointment->id]);
        factory(Appointments::class, 10)->create(['auditions_id' => $audition->id]);
        $users->each(function ($item) use ($audition, $appointment) {
            factory(UserSlots::class)->create([
                'user_id' => $item->id,
                'appointment_id' => $appointment->id,
                'status' => 'reserved',
                'slots_id' => factory(Slots::class)->create(['appointment_id' => $appointment->id])->id

            ]);
        });

        $response = $this->json('POST',
            'api/a/auditions/user?token=' . $this->token,
            [
                'appointment' => $appointment->id,
                'rol' => factory(Roles::class)->create(['auditions_id' => $audition->id])->id,
                'type' => 2
            ]);
        $response->assertStatus(201);
        $response->assertJsonStructure(['data']);

    }
}
