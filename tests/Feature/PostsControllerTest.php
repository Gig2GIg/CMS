<?php 

namespace Test\Unit;

use Tests\TestCase;

use App\Models\User;
use App\Models\UserDetails;
use App\Models\Posts;

class PostsControllerTest extends TestCase
{
    protected $token;
    protected $userId;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
         $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->userId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }

    public function test_created_posts_201()
    {
   
        $response = $this->json('POST',
            'api/t/blog/posts?token=' . $this->token, 
            [
                'title' =>  $this->faker->title(),
                'url_media' =>  $this->faker->url(),
                'body' =>  $this->faker->paragraph(),
                'type' => 'blog',
                'search_to' =>  'both'
            ]);

        $response->assertStatus(201);

    }

    public function test_update_posts_200()
    {
        $post = factory(Posts::class)->create(['user_id' => $this->userId]);
        
        $response = $this->json('PUT',
            'api/t/blog/posts/'. $post->id .'?token=' . $this->token, 
            [
                'title' =>  $this->faker->title(),
                'url_media' =>  $this->faker->url(),
                'body' =>  $this->faker->paragraph(),
                'type' => 'blog',
                'search_to' =>  'both'
            ]);

        $response->assertStatus(200);

    }


    public function test_delete_posts_200()
    { 
        
        $post = factory(Posts::class)->create(['user_id' => $this->userId]);
     
        $response = $this->json('DELETE', 'api/t/blog/posts/'. $post->id. '/delete' .'?token=' . $this->token);
        $response->assertStatus(200);
    }

    public function test_list_posts_200()
    {
        $post = factory(Posts::class, 20)->create(['user_id' => $this->userId]);
        $response = $this->json('GET', 'api/t/blog/posts'. '?token=' . $this->token);

        $response->assertStatus(200);
        $response->assertJsonStructure(['data']);
  
    }
}
