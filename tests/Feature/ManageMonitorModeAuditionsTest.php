<?php

namespace Tests\Unit;

use App\Models\Appointments;
use App\Models\Auditions;
use App\Models\Monitor;
use App\Models\Roles;
use App\Models\User;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ManageMonitorModeAuditionsTest extends TestCase
{
    protected $auditionId;
    protected $token;
    protected $appointmentId;

    public function test_create_update_monitor_audition()
    {

        $response = $this->json('POST', 'api/t/monitor/updates?token=' . $this->token, [
            'appointment' => $this->appointmentId,
            'title' => 'Checking open',
            'time' => $this->faker->time()
        ]);
        $response->assertStatus(201);
        $response->assertJson(['data' => 'Update Publised']);
    }

    public function test_list_by_updates()
    {
        factory(Monitor::class, 10)->create(['appointment_id' => $this->appointmentId]);
        $response = $this->json('GET', 'api/monitor/show/' . $this->appointmentId . '?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [[
            'id',
            'time',
            'title',
        ]]]);
    }

    public function test_list_by_updates_404()
    {
        $response = $this->json('GET', 'api/monitor/show/' . $this->auditionId . '?token=' . $this->token);
        $response->assertStatus(404);

    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url, 'name' => 'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);
        $appointment = factory(Appointments::class)->create([
            'auditions_id'=>$audition
        ]);
        $audition->media()->create(['url' => $this->faker->url, 'type' => 4, 'name' => 'test']);
        $this->appointmentId = $appointment->id;
        $this->userId = $user->id;
        $this->auditionId = $audition->id;
    }
}
