<?php

namespace Tests\Feature;

use App\Models\Auditions;
use App\Models\User;
use App\Models\UserAuditionMedia;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class MediaManagerControllerTest extends TestCase
{
    protected $token;
    protected $testId;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'mediamanager@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>$this->faker->word()]);
        $userDetails = factory(UserDetails::class)->create([
            'type'=>2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'mediamanager@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

    }
     public function test_save_user_media(){
        $user = factory(User::class)->create();
        factory(UserDetails::class)->create([
            'user_id'=>$user->id
        ]);
        $response = $this->json('POST','api/a/media/manager?token='.$this->token,[
            'url'=>$this->faker->url(),
            'name'=>$this->faker->word(),
            'type'=>'video'
        ]);

        $response->assertStatus(200);

     }

    public function test_delete_user_media(){
        $user = factory(User::class)->create();
        $media = $user->image()->create([
            'url' => $this->faker->url,
            'name' => $this->faker->word,
            'type' => 'video'
        ]);
        $response = $this->json('DELETE','api/media/manager/'.$media->id.'?token='.$this->token);
        $response->assertStatus(200);

    }

    public function test_get_list_media(){
        $user = factory(User::class)->create();
        $media = ['audio','video','doc','image','sheet','cover'];
        for ($i=0;$i < 30;$i++){
            $user->image()->create([
                'url' => $this->faker->url,
                'name' => $this->faker->word,
                'type' => $media[$this->faker->numberBetween(0,5)]
            ]);
        }

        $response = $this->json('GET','api/a/media/user/list?token='.$this->token);
        $response->assertStatus(200);
    }

    public function test_get_list_by_user_media(){
        $audition = factory(Auditions::class,3)->create([
            'user_id'=>$this->testId
        ]);

        $audition->each(function($element){
            $media = ['audio','video','doc'];
            for ($i=0;$i < 3;$i++) {
                $element->media()->create([
                    'url' => $this->faker->url,
                    'name' => $this->faker->word,
                    'type' => $media[$i]
                ]);
            }
            factory(UserAuditionMedia::class)->create([
                'user_id'=>$this->testId,
                'auditions_id'=>$element->id
            ]);
        });



        $response = $this->json('GET','api/a/media/auditon/list?token='.$this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data'=>[[
            'name',
            'files'
        ]]]);
    }

    public function test_add_media_user(){
        $user = factory(User::class)->create();
        $audition = factory(Auditions::class)->create([
           'user_id'=>$user->id
        ]);
        $response = $this->json('POST','api/a/media/user/add?token='.$this->token,[
            'audition'=>$audition->id
        ]);
        $response->assertStatus(200);
    }
}
