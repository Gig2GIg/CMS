<?php

namespace Tests\Unit;

use App\Http\Exceptions\CreateException;
use App\Http\Exceptions\NotFoundException;
use App\Http\Exceptions\UpdateException;
use App\Http\Repositories\UserDetailsRepository;
use App\Models\User;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class DetailsUserUnitTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;
    protected $userId;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create();
        $this->userId = $user->id;
    }

    public function test_details_get_collection(){
        $data = factory(UserDetails::class)->create(['user_id'=>$this->userId]);
        $dataAll = new UserDetailsRepository(new UserDetails());
        $dataAll->create($data->toArray());
        $dataTest = $dataAll->all();
        $this->assertIsArray($dataTest->toArray());
    }
    public function test_create_details()
    {
        $data = factory(UserDetails::class)->create(['user_id'=>$this->userId])->toArray();
        $userDetailsRepo = new UserDetailsRepository(new UserDetails());
        $details = $userDetailsRepo->create($data);
        $this->assertInstanceOf(UserDetails::class, $details);
        $this->assertEquals($data['first_name'], $details->first_name);
        $this->assertEquals($data['city'], $details->city);
    }

    public function test_find_user_detail()
    {
        $details = factory(UserDetails::class)->create(['user_id'=>$this->userId]);
        $userDetailsRepo = new UserDetailsRepository(new UserDetails());
        $found =  $userDetailsRepo->find($details->id);
        $this->assertInstanceOf(UserDetails::class, $found);
        $this->assertEquals($found->first_name,$details->first_name);
        $this->assertEquals($found->city,$details->city);
    }

    public function test_update_user_detail()
    {
        $detail =factory(UserDetails::class)->create(['user_id'=>$this->userId]);
        $data = [
            'city' => $this->faker->city(),
            'first_name' => bcrypt($this->faker->firstName()),
        ];

        $userDetailRepo = new UserDetailsRepository($detail);
        $update = $userDetailRepo->update($data);

        $this->assertTrue($update);
        $this->assertEquals($data['city'], $detail->city);
        $this->assertEquals($data['first_name'], $detail->first_name);
    }

    public function test_delete_user_detail()
    {
        $detail = factory(UserDetails::class)->create(['user_id'=>$this->userId]);
        $userDetailRepo = new UserDetailsRepository($detail);
        $delete = $userDetailRepo->delete();
        $this->assertTrue($delete);
    }

    public function test_create_user_detail_exception()
    {
        $this->expectException(CreateException::class);
        $userDetailRepo = new UserDetailsRepository(new UserDetails());
        $userDetailRepo->create([]);
    }

    public function test_show_user_detail_exception()
    {
        $this->expectException(NotFoundException::class);
        $userDetailRepo = new UserDetailsRepository(new UserDetails());
        $userDetailRepo->find(28374);
    }

    public function test_update_user_detail_exception()
    {
        $this->expectException(UpdateException::class);

        $userDet = factory(UserDetails::class)->create(
            ['user_id'=>$this->userId]
        );
        $userDetailRepo = new UserDetailsRepository($userDet);
        $data = ['city'=>null];
        $userDetailRepo->update($data);
    }

    public function test_user_detail_delete_null()
    {
        $userDetailRepo = new UserDetailsRepository(new UserDetails());
        $delete = $userDetailRepo->delete();
        $this->assertNull($delete);

    }
}
