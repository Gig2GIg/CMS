<?php

namespace Tests\Unit;

use App\Models\AuditionContributors;
use App\Models\Auditions;
use App\Models\Roles;
use App\Models\User;
use App\Models\UserAuditions;
use App\Models\UserDetails;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class AuditionManagemenDirectortTest extends TestCase
{
    public function test_auditions_upcomming_director()
    {


        $data = factory(Auditions::class, 10)->create([
            'user_id' => $this->userId,
        ]);
        $dataRol =   factory(Roles::class,10)->create(['auditions_id'=>$data[0]->id]);
        $dataContrib = factory(AuditionContributors::class,10)->create([ 'user_id' => $this->userId,'auditions_id'=>$data[0]->id]);
        $response = $this->json('GET',
            'api/t/auditions/upcoming?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [[
            'id',
            'id_user',
            'title',
            'date',
            'union',
            'contract',
            'production',
            'media',
            'number_roles',
        ]]]);
    }

    public function test_auditions_passed_director()
    {


        $data = factory(Auditions::class, 10)->create([
            'user_id' => $this->userId,
        ]);
        $dataRol =   factory(Roles::class,10)->create(['auditions_id'=>$data[0]->id]);
        $dataContrib = factory(AuditionContributors::class,10)->create([ 'user_id' => $this->userId,'auditions_id'=>$data[0]->id]);
        $response = $this->json('GET',
            'api/t/auditions/passed?token=' . $this->token);
        $response->assertStatus(200);
        $response->assertJsonStructure(['data' => [[
            'id',
            'id_user',
            'title',
            'date',
            'union',
            'contract',
            'production',
            'media',
            'number_roles',
        ]]]);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url]);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 1,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token');

        $audition = factory(Auditions::class)->create([
            'user_id' => $user->id
        ]);
        $audition->media()->create(['url' => $this->faker->url, 'type' => 4]);
        $rol = factory(Roles::class)->create([
            'auditions_id' => $audition->id
        ]);
        $this->rolId = $rol->id;
        $this->userId = $user->id;
        $this->auditionId = $audition->id;
    }
}
