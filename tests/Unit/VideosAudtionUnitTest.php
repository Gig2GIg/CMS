<?php

namespace Tests\Unit;

use App\Http\Exceptions\CreateException;
use App\Http\Exceptions\NotFoundException;
use App\Http\Repositories\AuditionVideosRepository;
use App\Models\Auditions;
use App\Models\AuditionVideos;
use App\Models\Resources;
use App\Models\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class VideosAudtionUnitTest extends TestCase
{
    protected $userId;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create();
        $this->userId = $user->id;
    }

    public function test_create_audition_video()
    {
        $contributors = factory(User::class)->create();
        $audition = factory(Auditions::class)->create([
            'user_id'=>$contributors->id,
        ]);
        $repo = new AuditionVideosRepository(New AuditionVideos());

        $data = [
            'user_id'=>$this->userId,
            'contributors_id'=>$contributors->id,
            'url'=>$this->faker->imageUrl(),
            'auditions_id'=>$audition->id
        ];
        $videoaudition = $repo->create($data);
        $this->assertInstanceOf(AuditionVideos::class, $videoaudition);


    }
    public function test_create_audition_video_exception()
    {
        $this->expectException(CreateException::class);
        $repo = new AuditionVideosRepository(New AuditionVideos());
        $video = $repo->create([]);
        $this->assertInstanceOf(AuditionVideos::class, $video);
    }
    public function test_videos_show(){
        $contributors = factory(User::class)->create();
        $audition = factory(Auditions::class)->create([
            'user_id'=>$contributors->id,
        ]);$resource = new Resources();

        $vid = factory(AuditionVideos::class)->create([
            'user_id'=>$this->userId,
            'contributors_id'=>$contributors->id,
            'url'=>$this->faker->imageUrl(),
            'auditions_id'=>$audition->id
        ]);

        $videoRepo = new AuditionVideosRepository(new AuditionVideos());
        $data = $videoRepo->find($vid->id);
        $this->assertInstanceOf(AuditionVideos::class, $data);
    }

    public function test_videos_show_list(){
        $contributors = factory(User::class)->create();
        $audition = factory(Auditions::class)->create([
            'user_id'=>$contributors->id,
        ]);$resource = new Resources();

        $vid = factory(AuditionVideos::class,3)->create([
            'user_id'=>$this->userId,
            'contributors_id'=>$contributors->id,
            'url'=>$this->faker->imageUrl(),
            'auditions_id'=>$audition->id
        ]);

        $videoRepo = new AuditionVideosRepository(new AuditionVideos());
        $data = $videoRepo->findbyparam('auditions_id',$audition->id);
        $this->assertTrue($data->get()->count() > 2);
    }

    public function test_video_audition_show_exception()
    {
        $this->expectException(NotFoundException::class);
        $skill_userRepo = new AuditionVideosRepository(new AuditionVideos());
        $skill_userRepo->find(28374);
    }

}
