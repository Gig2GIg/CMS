<?php

namespace Tests\Unit;

use App\Models\MarketplaceCategory;
use App\Models\Marketplace;
use App\Models\User;
use App\Models\UserDetails;
use App\Models\Recommendations;
use App\Models\Auditions;

use Tests\TestCase;

use App\Http\Repositories\Marketplace\MarketplaceRepository;

class MarketplaceControllerTest extends TestCase
{
    protected $token;
    protected $testId;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url,'name'=>'test']);
        $userDetails = factory(UserDetails::class)->create([
            'type'=>2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);

        $this->token = $response->json('access_token'); 
    }

    public function test_search_marketplace_by_category_by_title_201()
    {
        $data = [
            'address' => $this->faker->address,
            'title' => $this->faker->name,
            'phone_number' => $this->faker->phoneNumber(),
            'email' => $this->faker->safeEmail(),
            'services' => $this->faker->paragraph(),
            'url_web'=> 'www.profesional.com',
            'marketplace_category_id' => $marketplaceCategory->id
        ];

        $marketplace_repo = new MarketplaceRepository(new Marketplace());
      
        $marketplace = $marketplace_repo->create($data);
       
        $value = $marketplace->title;
       

        $response = $this->json('GET',
            'api/a/marketplace_categories/'. $marketplaceCategory->id.'/marketplaces/search?value='. $value.'&token=' . $this->token,

            $data);
       
        $response->assertStatus(200);
    }

    public function test_list_marketplace_by_user_id_and_audition_id_200()
    {
        $user = factory(User::class)->create();
        $userDetails = factory(UserDetails::class)->create([
            'user_id'=>$user->id
        ]);    

        $audition = factory(Auditions::class)->create([
            'user_id'=>$this->testId
        ]);

        $marketplaceCategory = factory(MarketplaceCategory::class)->create();

        $marketplace = factory(Marketplace::class)->create([
            'marketplace_category_id'=>$marketplaceCategory->id
        ]);

        $recomendation = factory(Recommendations::class, 10)->create([
                'marketplace_id' =>$marketplace->id,
                'user_id' =>$user->id,
                'audition_id'=>$audition,
            ]
        );    

        $response = $this->json('GET',
            'api/t/feedback/marketplaces/recomendations?user_id='.$userDetails.'1&audition_id='.$audition.'&recommendation_id='.$recomendation.'&token=' . $this->token);
             
        $response->assertStatus(200);
    }
}
