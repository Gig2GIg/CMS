<?php

namespace Tests\Unit;

use App\Http\Exceptions\CreateException;
use App\Http\Exceptions\NotFoundException;
use App\Http\Repositories\UserAparenceRepository;
use App\Models\User;
use App\Models\UserAparence;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UserAparenceTest extends TestCase
{
    protected $userId;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create();
        $this->userId = $user->id;
    }

    public function test_create_user_aparence()
    {
        $repo = new UserAparenceRepository(New UserAparence());
        $data = factory(UserAparence::class)->create([
            'user_id'=>$this->userId,

        ]);
        $aparence= $repo->create($data->toArray());
        $this->assertInstanceOf(UserAparence::class, $aparence);
        $this->assertEquals($data->name,$aparence->name);
        $this->assertEquals($data->company,$aparence->company);

    }
    public function test_create_user_aparence_exception()
    {
        $this->expectException(CreateException::class);
        $repo = new UserAparenceRepository(New UserAparence());
        $aparence= $repo->create([]);
        $this->assertInstanceOf(UserAparence::class, $aparence);
    }

    public function test_show_aparence_user()
    {
        $aparence= factory(UserAparence::class)->create([
            'user_id'=>$this->userId,

        ]);
        $aparenceRepo = new UserAparenceRepository(new UserAparence());
        $found =  $aparenceRepo->find($aparence->id);
        $this->assertInstanceOf(UserAparence::class, $found);
        $this->assertEquals($found->hair,$aparence->hair);
        $this->assertEquals($found->eyes,$aparence->eyes);
    }



    public function test_update_aparence_user()
    {
        $data = [
            'height'=>$this->faker->numberBetween(150,210),
            'weight'=>$this->faker->numberBetween(50,110),
            'hair'=>$this->faker->colorName(),
            'eyes'=>$this->faker->colorName(),
            'race'=>$this->faker->word(),
        ];
        $aparence= factory(UserAparence::class)->create([
            'user_id'=>$this->userId,

        ]);
        $aparenceRepo = new UserAparenceRepository($aparence);
        $update = $aparenceRepo->update($data);
        $this->assertTrue($update);
    }

    public function test_show_aparence_user_exception()
    {
        $this->expectException(NotFoundException::class);
        $aparenceRepo = new UserAparenceRepository(new UserAparence());
        $aparenceRepo->find(28374);
    }

}
