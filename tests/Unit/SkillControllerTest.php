<?php

namespace Tests\Unit;

use App\Models\Skills;
use App\Models\User;
use App\Models\UserDetails;

use App\Models\UserSkills;
use Tests\TestCase;


class SkillControllerTest extends TestCase
{
    protected $token;
    protected $testId;
    protected $skillId;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create([
                'email' => 'token@test.com',
                'password' => bcrypt('123456')]
        );
        $this->testId = $user->id;
        $user->image()->create(['url' => $this->faker->url]);
        $userDetails = factory(UserDetails::class)->create([
            'type' => 2,
            'user_id' => $user->id,
        ]);
        $response = $this->post('api/login', [
            'email' => 'token@test.com',
            'password' => '123456',
        ]);
        $skill = factory(Skills::class)->create();
        $this->skillId = $skill->id;
        $this->token = $response->json('access_token');

    }

    public function test_all_skill_200()
    {
        factory(Skills::class, 20)->create();
        $response = $this->json('GET', 'api/skills/show?token=' . $this->token);

        $response->assertStatus(200);
        $dataj = json_decode($response->content(), true);
        $count = count($dataj['data']);
        $this->assertTrue($count > 5);
        $response->assertJsonStructure(['data' => [[
            "id",
            "name",
        ]]]);
    }

    public function test_all_skill_by_user_200()
    {
        $skill = factory(Skills::class)->create();
        factory(UserSkills::class, 10)->create([
            'user_id' => $this->testId,
            'skills_id' => $this->skillId
        ]);
        $response = $this->json('GET', 'api/skills/byuser?token=' . $this->token);

        $response->assertStatus(200);
        $dataj = json_decode($response->content(), true);
        $count = count($dataj['data']);
        $this->assertTrue($count > 5);
        $response->assertJsonStructure(['data' => [[
            "id",
            "name",
        ]]]);
    }

    public function test_add_skill_user_200()
    {
        $response = $this->json('POST','api/a/skills/add?token=' . $this->token,[
            'skills_id'=>$this->skillId
        ]);
        $response->assertStatus(201);

    }

    public function test_delete_skill_user_200()
    {
       $skill = factory(UserSkills::class)->create([
            'user_id' => $this->testId,
            'skills_id' => $this->skillId
        ]);
        $response = $this->json('DELETE','api/a/skills/delete/'.$skill->id.'?token='.$this->token);
        $response->assertStatus(200);

    }
}
