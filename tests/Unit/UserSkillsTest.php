<?php

namespace Tests\Unit;

use App\Http\Exceptions\CreateException;
use App\Http\Exceptions\NotFoundException;
use App\Http\Exceptions\UpdateException;
use App\Http\Repositories\UserSkillsRepository;
use App\Models\Skills;
use App\Models\User;
use App\Models\UserSkills;
use Tests\TestCase;


class UserSkillsTest extends TestCase
{
    protected $userId;
    protected $skillId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create();
        $skill = factory(Skills::class)->create();
        $this->userId = $user->id;
        $this->skillId = $skill->id;
    }

    public function test_create_skill_user_user()
    {
        $repo = new UserSkillsRepository(New UserSkills());
        $data = factory(UserSkills::class)->create([
            'user_id'=>$this->userId,
            'skills_id'=>$this->skillId
        ]);
        $skill_user = $repo->create($data->toArray());
        $this->assertInstanceOf(UserSkills::class, $skill_user);
        $this->assertEquals($data->name,$skill_user->name);
        $this->assertEquals($data->rol,$skill_user->rol);

    }
    public function test_create_skill_user_users_exception()
    {
        $this->expectException(CreateException::class);
        $repo = new UserSkillsRepository(New UserSkills());
        $skill_user = $repo->create([]);
        $this->assertInstanceOf(UserSkills::class, $skill_user);
    }
    public function test_skill_user_get_all(){
        factory(UserSkills::class, 5)->create([
            'user_id'=>$this->userId,
            'skills_id'=>$this->skillId
        ]);
        $skill_user = new UserSkillsRepository(new UserSkills());
        $data = $skill_user->all();
        $this->assertIsArray($data->toArray());
        $this->assertTrue($data->count() > 2);
    }
    public function test_show_skill_user()
    {
        $skill_user = factory(UserSkills::class)->create([
            'user_id'=>$this->userId,
            'skills_id'=>$this->skillId
        ]);
        $skill_userRepo = new UserSkillsRepository(new UserSkills());
        $found =  $skill_userRepo->find($skill_user->id);
        $this->assertInstanceOf(UserSkills::class, $found);
        $this->assertEquals($found->name,$skill_user->name);
        $this->assertEquals($found->rol,$skill_user->rol);
    }



    public function test_delete_skill_user()
    {
        $skill_user = factory(UserSkills::class)->create([
            'user_id'=>$this->userId,
            'skills_id'=>$this->skillId
        ]);
        $skill_userRepo = new UserSkillsRepository($skill_user);
        $delete = $skill_userRepo->delete();
        $this->assertTrue($delete);
    }

    public function test_show_skill_user_exception()
    {
        $this->expectException(NotFoundException::class);
        $skill_userRepo = new UserSkillsRepository(new UserSkills());
        $skill_userRepo->find(28374);
    }


    public function test_skill_user_delete_null()
    {
        $skill_userRepo = new UserSkillsRepository(new UserSkills());
        $delete = $skill_userRepo->delete();
        $this->assertNull($delete);

    }
}
